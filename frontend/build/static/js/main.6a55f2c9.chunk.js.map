{"version":3,"sources":["components/emission_chart.js","App.js","serviceWorker.js","index.js"],"names":["ReactChartkick","addAdapter","Chart","EmissionChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setPerCapita","event","target","value","type","checked","processNation","state","nation","name","findArrayElement","element","selectNation","perCapita","selectPrimaryNation","countryData","find","country","setState","selectNationToCompare","nationToCompare","countryName","emission_values","fetch","Country_Code","then","response","json","data","keys","map","year","objectSpread","_unused","changeMode","mode","processData","nations","topEmissions","forEach","index","push","current_emissions","Date","getFullYear","length","emissions","topEmissionsMinimum","reduce","min","p","splice","indexOf","_this2","error","console","warn","react_default","a","createElement","className","onChange","i","key","react_chartkick_esm","Component","App","emission_chart_EmissionChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a55f2c9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactChartkick, { LineChart } from 'react-chartkick'\r\nimport Chart from 'chart.js'\r\n\r\nReactChartkick.addAdapter(Chart)\r\n\r\nexport default class EmissionChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: \"\",\r\n            countryData: [],\r\n            topEmissions: [],\r\n            nations: [],\r\n            nation: {},\r\n\t\t\tnationToCompare: {},\r\n            perCapita: false\r\n        };\r\n    }\r\n\r\n    setPerCapita = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        this.processNation(this.state.nation.name, value)\r\n    }\r\n\r\n    findArrayElement = (element, name) => {\r\n        return name === element.name\r\n    }\r\n\r\n    selectNation = (event) => {\r\n        this.processNation(event.target.value, this.state.perCapita)\r\n    }\r\n\r\n\tselectPrimaryNation = (event) => {\r\n\t\tconst nation = this.state.countryData.find(country => country.name === event.target.value)\r\n\t\tthis.setState({nation})\r\n\t}\r\n\r\n\tselectNationToCompare = (event) => {\r\n\t\tconst nationToCompare = this.state.countryData.find(country => country.name === event.target.value)\r\n\t\tthis.setState({nationToCompare})\r\n\t}\r\n\r\n    processNation = (countryName, perCapita) => {\r\n        const nation = this.state.countryData.find(country => country.name === countryName)\r\n        let emission_values = {}\r\n        if (perCapita && nation) {\r\n            try{\r\n                fetch('/country_population/' + nation.Country_Code)\r\n                    .then(response => response.json())\r\n                    .then(data => Object.keys(data.data).map(year =>\r\n                        {if(nation.data[year] && data.data[year]) {\r\n                            emission_values[year] = nation.data[year] /  data.data[year]\r\n                        }}\r\n                    ))\r\n                    .then( () => this.setState({nation: { ...nation, ...{ data: emission_values } }, perCapita}))\r\n            } catch {\r\n                this.setState({nation, perCapita})\r\n            }\r\n        }\r\n        this.setState({nation, perCapita})\r\n    }\r\n\r\n    changeMode = (event) => {\r\n        this.setState({mode: event.target.value, nation: {}, nationToCompare: {}})\r\n    }\r\n\r\n    processData = (data) => {\r\n        let nations = [];\r\n        let topEmissions = [];\r\n        data.forEach(function (value, index){\r\n            nations.push(value.name)\r\n            const current_emissions = value.data[(new Date()).getFullYear() - 5]\r\n            if (current_emissions){\r\n                if (topEmissions.length < 10) {\r\n                    topEmissions.push({name: value.name, data: value.data, emissions: value.data[(new Date()).getFullYear() - 5]})\r\n                } else {\r\n                    const topEmissionsMinimum = topEmissions.reduce((min, p) => p.emissions < min.emissions ? p : min, topEmissions[0])\r\n                    if (current_emissions > topEmissionsMinimum.emissions) {\r\n                        topEmissions.splice(topEmissions.indexOf(topEmissionsMinimum), 1);\r\n                        topEmissions.push({name: value.name, data: value.data, emissions: value.data[(new Date()).getFullYear() - 5]})\r\n                    }\r\n                };\r\n            };\r\n        });\r\n        this.setState({countryData: data, topEmissions, nations})\r\n    }\r\n\r\n    componentDidMount() {\r\n        try{\r\n            fetch('/emission_json')\r\n                .then(response=> response.json())\r\n                .then(data => this.processData(data))\r\n        } catch (error){\r\n            console.warn(error);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <select onChange={this.changeMode}>\r\n                    <option value={''}> select mode </option>\r\n                    <option value={'nation'}>nation</option>\r\n\t\t\t\t\t<option value={'compare nations'}>compare nations</option>\r\n                    <option value={'top emissions'}>top emissions</option>\r\n                </select>\r\n                {this.state.mode === 'nation' &&\r\n                    <div>\r\n                        <select onChange={this.selectNation}>\r\n                            <option value={\"\"}>select nation</option>\r\n                            {this.state.nations.map((nation, i) => <option value={nation} key={i}>{nation}</option>)}}\r\n                        </select>\r\n\t\t\t\t\t\t<label>Show per capita</label>\r\n                        <input\r\n                          name=\"perCapita\"\r\n                          type=\"checkbox\"\r\n                          checked={this.state.perCapita}\r\n                          onChange={this.setPerCapita} />\r\n                    </div>\r\n                }\r\n\t\t\t\t{this.state.mode === 'compare nations' &&\r\n                    <div>\r\n                        <select onChange={this.selectPrimaryNation}>\r\n                            <option value={\"\"}>select nation 1</option>\r\n                            {this.state.nations.map((nation, i) => <option value={nation} key={i}>{nation}</option>)}}\r\n                        </select>\r\n\t\t\t\t\t\t<select onChange={this.selectNationToCompare}>\r\n                            <option value={\"\"}>select nation 2</option>\r\n                            {this.state.nations.map((nation, i) => <option value={nation} key={i + \"#compare\"}>{nation}</option>)}}\r\n                        </select>\r\n                    </div>\r\n                }\r\n                {this.state.mode === 'top emissions' &&\r\n                    <LineChart data={this.state.topEmissions} />\r\n                }\r\n                {this.state.mode === 'nation' && Object.keys(this.state.nation).length !== 0 &&\r\n                    <LineChart data={this.state.nation.data} />\r\n                }\r\n\t\t\t\t{this.state.mode === 'compare nations' && Object.keys(this.state.nation).length !== 0 && Object.keys(this.state.nationToCompare).length !== 0 &&\r\n                    <LineChart data={[this.state.nation, this.state.nationToCompare]} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// frontend/src/App.js\n\nimport React, { Component } from \"react\";\nimport EmissionChart from \"./components/emission_chart\";\n\nclass App extends Component {\n\n  render() {\n\treturn (\n\t  <main className=\"content\">\n\t\t<h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\n\t\t<div className=\"row \">\n\t\t  <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n\t\t\t<div className=\"card p-3\">\n\t\t\t  <div className=\"\">\n                <EmissionChart/>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </div>\n\t\t</div>\n\t  </main>\n\t);\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';       // add this\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}